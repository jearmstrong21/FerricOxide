mod math {

    let PI: f32 = 3.14159265359

    mod c {
        extern fn sqrtf(x: f32) -> f32
        extern fn fabsf(x: f32) -> f32
        extern fn atan(x: f64) -> f64
        extern fn atan2(y: f64, x: f64) -> f64
    }

    extern fn cos(x: f32) -> f32
    extern fn sin(x: f32) -> f32

    fn sqrt(x: f32) -> f32 { return c::sqrtf(x); }
    fn abs(x: f32) -> f32 { return c::fabsf(x); }
    fn atan(x: f32) -> f32 { return c::atan(x as f64) as f32; }
    fn atan2(y: f32, x: f32) -> f32 { return c::atan2(y as f64, x as f64) as f32; }

    fn lerp(a: f32, b: f32, t: f32) -> f32 { return a + (b - a) * t; }
    fn norm(x: f32, a: f32, b: f32) -> f32 { return (x - a) / (b - a); }
    fn map(x: f32, a1: f32, b1: f32, a2: f32, b2: f32) -> f32 {
        return lerp(a2, b2, norm(x, a1, b1));
    }

}