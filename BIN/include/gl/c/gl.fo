// AUTOGENERATED
// DONT EDIT MANUALLY

mod gl {
	mod c {
		let GL_CURRENT_BIT: i32 = 0x00000001
		let GL_POINT_BIT: i32 = 0x00000002
		let GL_LINE_BIT: i32 = 0x00000004
		let GL_POLYGON_BIT: i32 = 0x00000008
		let GL_POLYGON_STIPPLE_BIT: i32 = 0x00000010
		let GL_PIXEL_MODE_BIT: i32 = 0x00000020
		let GL_LIGHTING_BIT: i32 = 0x00000040
		let GL_FOG_BIT: i32 = 0x00000080
		let GL_DEPTH_BUFFER_BIT: i32 = 0x00000100
		let GL_ACCUM_BUFFER_BIT: i32 = 0x00000200
		let GL_STENCIL_BUFFER_BIT: i32 = 0x00000400
		let GL_VIEWPORT_BIT: i32 = 0x00000800
		let GL_TRANSFORM_BIT: i32 = 0x00001000
		let GL_ENABLE_BIT: i32 = 0x00002000
		let GL_COLOR_BUFFER_BIT: i32 = 0x00004000
		let GL_HINT_BIT: i32 = 0x00008000
		let GL_EVAL_BIT: i32 = 0x00010000
		let GL_LIST_BIT: i32 = 0x00020000
		let GL_TEXTURE_BIT: i32 = 0x00040000
		let GL_SCISSOR_BIT: i32 = 0x00080000
		let GL_MULTISAMPLE_BIT: i32 = 0x20000000
		let GL_MULTISAMPLE_BIT_ARB: i32 = 0x20000000
		let GL_MULTISAMPLE_BIT_EXT: i32 = 0x20000000
		let GL_MULTISAMPLE_BIT_3DFX: i32 = 0x20000000
		let GL_ALL_ATTRIB_BITS: i32 = 0xFFFFFFFF
		let GL_FALSE: i32 = 0
		let GL_TRUE: i32 = 1
		let GL_POINTS: i32 = 0x0000
		let GL_LINES: i32 = 0x0001
		let GL_LINE_LOOP: i32 = 0x0002
		let GL_LINE_STRIP: i32 = 0x0003
		let GL_TRIANGLES: i32 = 0x0004
		let GL_TRIANGLE_STRIP: i32 = 0x0005
		let GL_TRIANGLE_FAN: i32 = 0x0006
		let GL_QUADS: i32 = 0x0007
		let GL_QUADS_EXT: i32 = 0x0007
		let GL_QUAD_STRIP: i32 = 0x0008
		let GL_POLYGON: i32 = 0x0009
		let GL_LINES_ADJACENCY: i32 = 0x000A
		let GL_LINES_ADJACENCY_ARB: i32 = 0x000A
		let GL_LINES_ADJACENCY_EXT: i32 = 0x000A
		let GL_LINE_STRIP_ADJACENCY: i32 = 0x000B
		let GL_LINE_STRIP_ADJACENCY_ARB: i32 = 0x000B
		let GL_LINE_STRIP_ADJACENCY_EXT: i32 = 0x000B
		let GL_TRIANGLES_ADJACENCY: i32 = 0x000C
		let GL_TRIANGLES_ADJACENCY_ARB: i32 = 0x000C
		let GL_TRIANGLES_ADJACENCY_EXT: i32 = 0x000C
		let GL_TRIANGLE_STRIP_ADJACENCY: i32 = 0x000D
		let GL_TRIANGLE_STRIP_ADJACENCY_ARB: i32 = 0x000D
		let GL_TRIANGLE_STRIP_ADJACENCY_EXT: i32 = 0x000D
		let GL_PATCHES: i32 = 0x000E
		let GL_PATCHES_EXT: i32 = 0x000E
		let GL_SHORT: i32 = 0x1402
		let GL_INT: i32 = 0x1404
		let GL_FLOAT: i32 = 0x1406
		let GL_DOUBLE: i32 = 0x140A
		let GL_COMPUTE_WORK_GROUP_SIZE: i32 = 0x8267
		let GL_PROGRAM_BINARY_LENGTH: i32 = 0x8741
		let GL_ARRAY_BUFFER: i32 = 0x8892
		let GL_ELEMENT_ARRAY_BUFFER: i32 = 0x8893
		let GL_STREAM_DRAW: i32 = 0x88E0
		let GL_STREAM_READ: i32 = 0x88E1
		let GL_STREAM_COPY: i32 = 0x88E2
		let GL_STATIC_DRAW: i32 = 0x88E4
		let GL_STATIC_READ: i32 = 0x88E5
		let GL_STATIC_COPY: i32 = 0x88E6
		let GL_DYNAMIC_DRAW: i32 = 0x88E8
		let GL_DYNAMIC_READ: i32 = 0x88E9
		let GL_DYNAMIC_COPY: i32 = 0x88EA
		let GL_PIXEL_PACK_BUFFER: i32 = 0x88EB
		let GL_PIXEL_UNPACK_BUFFER: i32 = 0x88EC
		let GL_GEOMETRY_VERTICES_OUT: i32 = 0x8916
		let GL_GEOMETRY_INPUT_TYPE: i32 = 0x8917
		let GL_GEOMETRY_OUTPUT_TYPE: i32 = 0x8918
		let GL_UNIFORM_BUFFER: i32 = 0x8A11
		let GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: i32 = 0x8A35
		let GL_ACTIVE_UNIFORM_BLOCKS: i32 = 0x8A36
		let GL_FRAGMENT_SHADER: i32 = 0x8B30
		let GL_FRAGMENT_SHADER_ARB: i32 = 0x8B30
		let GL_VERTEX_SHADER: i32 = 0x8B31
		let GL_VERTEX_SHADER_ARB: i32 = 0x8B31
		let GL_SHADER_TYPE: i32 = 0x8B4F
		let GL_DELETE_STATUS: i32 = 0x8B80
		let GL_COMPILE_STATUS: i32 = 0x8B81
		let GL_LINK_STATUS: i32 = 0x8B82
		let GL_VALIDATE_STATUS: i32 = 0x8B83
		let GL_INFO_LOG_LENGTH: i32 = 0x8B84
		let GL_ATTACHED_SHADERS: i32 = 0x8B85
		let GL_ACTIVE_UNIFORMS: i32 = 0x8B86
		let GL_ACTIVE_UNIFORM_MAX_LENGTH: i32 = 0x8B87
		let GL_SHADER_SOURCE_LENGTH: i32 = 0x8B88
		let GL_ACTIVE_ATTRIBUTES: i32 = 0x8B89
		let GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: i32 = 0x8B8A
		let GL_TEXTURE_BUFFER: i32 = 0x8C2A
		let GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: i32 = 0x8C76
		let GL_TRANSFORM_FEEDBACK_BUFFER_MODE: i32 = 0x8C7F
		let GL_TRANSFORM_FEEDBACK_VARYINGS: i32 = 0x8C83
		let GL_TRANSFORM_FEEDBACK_BUFFER: i32 = 0x8C8E
		let GL_GEOMETRY_SHADER: i32 = 0x8DD9
		let GL_TESS_EVALUATION_SHADER: i32 = 0x8E87
		let GL_TESS_CONTROL_SHADER: i32 = 0x8E88
		let GL_COPY_READ_BUFFER: i32 = 0x8F36
		let GL_COPY_WRITE_BUFFER: i32 = 0x8F37
		let GL_DRAW_INDIRECT_BUFFER: i32 = 0x8F3F
		let GL_SHADER_STORAGE_BUFFER: i32 = 0x90D2
		let GL_DISPATCH_INDIRECT_BUFFER: i32 = 0x90EE
		let GL_QUERY_BUFFER: i32 = 0x9192
		let GL_COMPUTE_SHADER: i32 = 0x91B9
		let GL_ATOMIC_COUNTER_BUFFER: i32 = 0x92C0
		let GL_ACTIVE_ATOMIC_COUNTER_BUFFERS: i32 = 0x92D9
		extern fn glAttachShader(program: i32, shader: i32) -> void
		extern fn glBindBuffer(target: i32, buffer: i32) -> void
		extern fn glBindVertexArray(array: i32) -> void
		extern fn glBufferData(target: i32, size: i32, data: i8**, usage: i32) -> void
		extern fn glClear(mask: i32) -> void
		extern fn glClearColor(red: f32, green: f32, blue: f32, alpha: f32) -> void
		extern fn glCompileShader(shader: i32) -> void
		extern fn glCreateProgram() -> i32
		extern fn glCreateShader(type: i32) -> i32
		extern fn glDeleteBuffers(n: i32, buffers: i32*) -> void
		extern fn glDeleteProgram(program: i32) -> void
		extern fn glDeleteShader(shader: i32) -> void
		extern fn glDeleteVertexArrays(n: i32, arrays: i32*) -> void
		extern fn glDrawArrays(mode: i32, first: i32, count: i32) -> void
		extern fn glEnableVertexAttribArray(index: i32) -> void
		extern fn glGenBuffers(n: i32, buffers: i32*) -> void
		extern fn glGenVertexArrays(n: i32, arrays: i32*) -> void
		extern fn glGetProgramInfoLog(program: i32, bufSize: i32, length: i32*, infoLog: i8*) -> void
		extern fn glGetProgramiv(program: i32, pname: i32, params: i32*) -> void
		extern fn glGetShaderInfoLog(shader: i32, bufSize: i32, length: i32*, infoLog: i8*) -> void
		extern fn glGetShaderiv(shader: i32, pname: i32, params: i32*) -> void
		extern fn glLinkProgram(program: i32) -> void
		extern fn glPolygonMode(face: i32, mode: i32) -> void
		extern fn glShaderSource(shader: i32, count: i32, string: i8**, length: i32*) -> void
		extern fn glUseProgram(program: i32) -> void
		extern fn glVertexAttribPointer(index: i32, size: i32, type: i32, normalized: i32, stride: i32, pointer: i8**) -> void
		extern fn glViewport(x: i32, y: i32, width: i32, height: i32) -> void
	}
}