
include!("std/mem")
include!("std/io")


include!("gl/c")
include!("gl/shader")
include!("gl/vao")
include!("gl/util")

export("fo_run") fn run(argc: i32, argv: i8**) -> i32 {
    c::puts("FO: Hi!");
    if (gl::c::glfwInit() == 0) {
        c::puts("FO: glfwInit failed\n");
        return 1;
    }
    c::puts("FO: glfwInit");

    gl::c::glfwWindowHint(gl::c::GLFW_CONTEXT_VERSION_MAJOR, 3);
    gl::c::glfwWindowHint(gl::c::GLFW_CONTEXT_VERSION_MINOR, 3);
    gl::c::glfwWindowHint(gl::c::GLFW_OPENGL_FORWARD_COMPAT, 1);
    gl::c::glfwWindowHint(gl::c::GLFW_OPENGL_PROFILE, gl::c::GLFW_OPENGL_CORE_PROFILE);

    c::puts("FO: glfwHints");

    let window: void* = gl::c::glfwCreateWindow(720, 720, "FO: Hello World\0", 0, 0);

    c::puts("FO: window");

    if (window == 0) {
        c::puts("FO: glfwCreateWindow failed\n");
        gl::c::glfwTerminate();
        return 1;
    }

    c::puts("FO: window success");

    gl::c::glfwMakeContextCurrent(window);

    c::puts("FO: context");

    if (gl::c::gladLoadGLLoader(gl::c::glfwGetProcAddress) == 0) {
        c::puts("FO: Failed to initialize glad\n");
        return 1;
    }

    let vertexShaderSource: i8* = "#version 330 core\nlayout(location=0) in vec2 pos;layout(location=1) in vec3 col;out vec3 fcol;\nvoid main() {\n\tgl_Position = vec4(pos.x, pos.y, 0.0, 1.0);fcol=col;\n}";
    let fragmentShaderSource: i8* = "#version 330 core\nout vec4 fc;in vec3 fcol;\nvoid main() {\n\tfc = vec4(fcol, 1.0);\n}";

    c::puts(vertexShaderSource);
    c::puts(fragmentShaderSource);


    let shader = gl::shader::new(vertexShaderSource, fragmentShaderSource);

    let vertices: f32* = c::malloc(6 * sizeof(f32));

    c::puts("FO: \tvertices alloc");

    vertices[0] = 0.0;
    vertices[1] = 0.5;

    vertices[2] = -0.5;
    vertices[3] = -0.25;

    vertices[4] = 0.5;
    vertices[5] = -0.25;

    c::puts("FO: vertices");

    let colors: f32* = c::malloc(9 * sizeof(f32));

    colors[0] = 1f;
    colors[1] = 0f;
    colors[2] = 0f;

    colors[3] = 0f;
    colors[4] = 1f;
    colors[5] = 0f;

    colors[6] = 0f;
    colors[7] = 0f;
    colors[8] = 1f;

    c::puts("FO: colors");

    let vao = gl::vao::new();

    vao.attrib(0, 2, 3, vertices);
    vao.attrib(1, 3, 3, colors);

    c::free(vertices);
    c::free(colors);

    while (!gl::c::glfwWindowShouldClose(window)) {
        gl::clear(0, 0, 0);

        shader.bind();
        vao.triangles();

        gl::c::glfwSwapBuffers(window);
        gl::c::glfwPollEvents();
    }

    gl::c::glfwTerminate();
    return 0;
}