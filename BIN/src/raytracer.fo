extern i8* fopen(i8* filename, i8* mode);
extern i32 fclose(i8* ptr);

extern void c_fwrite_str(i8* ptr, i8* str);
extern void c_fwrite_i32(i8* ptr, i32 x);
extern void c_fwrite_space(i8* ptr);
extern void c_fwrite_newline(i8* ptr);

#include "std/math.fo"

extern f32 zero();
extern f32 one();

extern void printInt(i32 x);
extern void printPtr(i8* x);
extern i32 puts(i8* str);
extern void c_check_stack();

extern i8* malloc(i32 size);
extern void free(i8* ptr);


extern f32 c_randFloat();

f32 PI = 3.1415926536;

i32 img_width = 500;
i32 img_height = 500;
i32 img_depth = 10;
//i32 img_width = 300;
//i32 img_height = 300;
//i32 img_depth = 3;
i32 sample_grid_size = 10;

struct v3f col_white = new v3f { x: 1, y: 1, z: 1 };
struct v3f col_orange = new v3f { x: 0.9, y: 0.3, z: 0 };
struct v3f col_sky = new v3f { x: 0.15, y: 0.15, z: 0.25 };

struct material sphere1_material = new material { reflect: 0.5, color: col_white, emit: false };
struct material sphere2_material = new material { reflect: 1, color: col_white, emit: false };
struct material sphere3_material = new material { reflect: 0, color: vmul(50, col_white), emit: true };

struct material orange_plane_material = new material { reflect: 0, color: col_orange, emit: false };

struct sphere obj_s1 = new sphere { p: new v3f { x: 3, y: 4, z: -5 }, r: 9, material: sphere1_material };
struct sphere obj_s2 = new sphere { p: new v3f { x: -15, y: 4, z: -5 }, r: 6, material: sphere2_material };
struct sphere obj_s3 = new sphere { p: new v3f { x: 0, y: 20, z: 0 }, r: 5, material: sphere3_material };
struct plane  obj_p1 = new plane { p: new v3f { x: 0, y: 0, z: 0 }, n: new v3f { x: 0, y: 1, z: 0 }, material: orange_plane_material, dist: 1000, euclid: true};

struct v3f camera_pos = new v3f { x: 5, y: 6, z: 15 };
struct v3f camera_target = vzero();

struct v3f camera_up = new v3f { x: 0, y: 1, z: 0 };
struct v3f camera_look = vnorm(vsub(camera_target, camera_pos));
struct v3f camera_left = vcross(camera_up, camera_look);

struct ray_hit cast_ray(struct ray ray) {
    final_hit = zeroinit(struct ray_hit);

    try_sphere_ray_hit(obj_s1, ray);
    try_sphere_ray_hit(obj_s2, ray);
    try_sphere_ray_hit(obj_s3, ray);
    try_plane_ray_hit(obj_p1, ray);
//    try_plane_ray_hit(obj_p2, ray);
//    try_plane_ray_hit(obj_p3, ray);
//    try_plane_ray_hit(obj_p4, ray);
//    try_plane_ray_hit(obj_p5, ray);

    final_hit.incoming_ray = ray.d;
//    if final_hit.hit_pos.z < -10 {
//        final_hit.success = false;
//    }

    return final_hit;
}



struct v3f {
    f32 x;
    f32 y;
    f32 z;
}
struct v3f vzero() { return new v3f { x: zero(), y: zero(), z: zero() }; }
struct v3f vadd(struct v3f a, struct v3f b) { return new v3f { x: a.x + b.x, y: a.y + b.y, z: a.z + b.z }; }
struct v3f vsub(struct v3f a, struct v3f b) { return new v3f { x: a.x - b.x, y: a.y - b.y, z: a.z - b.z }; }
struct v3f vcopy(struct v3f a) { return new v3f { x: a.x, y: a.y, z: a.z }; }
f32 vmag(struct v3f a) { return sqrtf(a.x * a.x + a.y * a.y + a.z * a.z); }
struct v3f vmul(f32 a, struct v3f b) { return new v3f { x: a * b.x, y: a * b.y, z: a * b.z }; }
struct v3f vnorm(struct v3f a) {
    f32 m = vmag(a);
    return vmul(one() / m, a);
}
f32 vdot(struct v3f a, struct v3f b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
struct v3f vreflect(struct v3f I, struct v3f N) {
    return vnorm(vsub(
        I,
        vmul(
            ((f32)2) * vdot(N, I) / vdot(N, N),
            N
        )
    ));
}
struct v3f vcross(struct v3f a, struct v3f b) {
    return new v3f {
        x: a.y * b.z - a.z * b.y,
        y: a.z * b.x - a.x * b.z,
        z: a.x * b.y - a.y * b.x
    };
}


struct material {
    f32 reflect;
    struct v3f color;
    bool emit;
}
struct ray {
    struct v3f x0;
    struct v3f d; /* norm */
}
struct sphere {
    struct v3f p;
    f32 r;
    struct material material;
}
struct plane {
    struct v3f p;
    struct v3f n;
    struct material material;
    f32 dist;
    bool euclid;
}
struct ray_hit {
    bool success;
    f32 dist;
    struct v3f incoming_ray;
    struct v3f hit_pos;
    struct v3f normal;
    struct material material;
}

bool try_quadratic_solve(f32 a, f32 b, f32 c, f32* t0, f32* t1) {
    f32 discr = b * b - ((f32)4) * a * c;
    if discr < 0 { return false; }
    discr = sqrtf(discr);
    t0[0] = (-b - discr) / (((f32)2) * a);
    t1[0] = (-b + discr) / (((f32)2) * a);
    return true;
}

struct ray_hit final_hit = zeroinit(struct ray_hit);
void try_sphere_ray_hit(struct sphere sphere, struct ray ray) {
    struct v3f p = sphere.p;
    f32 r = sphere.r;
    struct v3f x0 = ray.x0;
    struct v3f d = ray.d;

    struct v3f L = vsub(x0, p);

    f32 a = vdot(d, d);
    f32 b = vdot(d, L) * 2;
    f32 c = vdot(L, L) - r * r;

    f32 t0 = (f32) 0;
    f32 t1 = (f32) 0;

    if !try_quadratic_solve(a, b, c, &t0, &t1) { return; }

    if t1 < t0 {
        f32 temp = t0;
        t0 = t1;
        t1 = temp;
    }
    if t0 < 0 {
        t0 = t1;
    }
    if t0 < 0 {
        return;
    }
    f32 t = t0;

    struct v3f hit_pos = vadd(x0, vmul(t0, d));
    final_hit = ray_hit_closest(final_hit, new ray_hit {
        success: true,
        dist: t0,
        incoming_ray: d,
        hit_pos: hit_pos,
        normal: vnorm(vsub(hit_pos, p)),
        material: sphere.material
    });
}
void try_plane_ray_hit(struct plane plane, struct ray ray) {
    struct v3f p = plane.p;
    struct v3f n = plane.n;
    struct v3f x0 = ray.x0;
    struct v3f d = ray.d;

    f32 div = vdot(d, n);
    if fabsf(div) < ((f32)1) / 1000 { return; }

    f32 t = vdot(vsub(p, x0), n) / div;
    if t < 0 { return; }

    struct v3f hit_pos = vadd(x0, vmul(t, d));
    f32 dist = if plane.euclid { vmag(vsub(hit_pos, p)) } else {
        fabsf(hit_pos.x - p.x) +
        fabsf(hit_pos.y - p.y) +
        fabsf(hit_pos.z - p.z)
    };
    if dist > plane.dist { return; }

    final_hit = ray_hit_closest(final_hit, new ray_hit {
        success: true,
        dist: t,
        incoming_ray: d,
        hit_pos: hit_pos,
        normal: n,
        material: plane.material
    });
}

f32 flerp(f32 a, f32 b, f32 t) { return a + (b - a) * t; }
f32 fnorm(f32 x, f32 a, f32 b) { return (x - a) / (b - a); }
f32 fmap(f32 x, f32 a1, f32 b1, f32 a2, f32 b2) {
    f32 norm = fnorm(x, a1, b1);
    return flerp(a2, b2, norm);
}
struct v3f vmap(struct v3f x, f32 a1, f32 b1, f32 a2, f32 b2) {
    return new v3f {
        x: fmap(x.x, a1, b1, a2, b2),
        y: fmap(x.y, a1, b1, a2, b2),
        z: fmap(x.z, a1, b1, a2, b2)
    };
}

struct ray_hit ray_hit_closest(struct ray_hit a, struct ray_hit b) {
    if !a.success { return b; }
    if !b.success { return a; }
    if a.dist < b.dist { return a; }
    else { return b; }
}

struct v3f simple_eval_ray_hit(struct ray_hit ray_hit) {
    if !ray_hit.success { return col_sky; }
    return ray_hit.material.color;
}

struct v3f eval_ray_hit(struct ray_hit ray_hit, i32 depth) {

    struct v3f base_color = simple_eval_ray_hit(ray_hit);

    if depth <= 1 || !ray_hit.success || ray_hit.material.emit {
        return base_color;
    }

//    struct v3f outgoing_ray_d = vreflect(ray_hit.incoming_ray, ray_hit.normal);

    // radius r, inclination theta, azimuth phi
    // physics convention for spherical coordinates
    // god this is screwing with my head
    f32 x = c_randFloat() * 2 - 1;
    f32 y = c_randFloat() * 2 - 1;
    f32 z = c_randFloat() * 2 - 1;
    f32 d = sqrtf(x*x+y*y+z*z);
    while d > 1 || x*ray_hit.normal.x+y*ray_hit.normal.y+z*ray_hit.normal.z < 0 {
        x = c_randFloat() * 2 - 1;
        y = c_randFloat() * 2 - 1;
        z = c_randFloat() * 2 - 1;
        d = sqrtf(x*x+y*y+z*z);
    }
    struct v3f outgoing_ray_d = new v3f { x: x / d, y: y / d, z: z / d };
    struct v3f refl = vreflect(ray_hit.incoming_ray, ray_hit.normal);

    outgoing_ray_d.x = flerp(outgoing_ray_d.x, refl.x, ray_hit.material.reflect);
    outgoing_ray_d.y = flerp(outgoing_ray_d.y, refl.y, ray_hit.material.reflect);
    outgoing_ray_d.z = flerp(outgoing_ray_d.z, refl.z, ray_hit.material.reflect);

    struct ray outgoing_ray = new ray { x0: vadd(ray_hit.hit_pos, vmul(((f32)1)/1000, outgoing_ray_d)), d: outgoing_ray_d };
//    if ray_hit.material.reflect == 1.0 {
//        outgoing_ray.d = vreflect(ray_hit.incoming_ray, ray_hit.normal);
//    }
    struct ray_hit refl_hit = cast_ray(outgoing_ray);

    struct v3f reflect_color = eval_ray_hit(refl_hit, depth - 1);
    reflect_color = vmul(vdot(outgoing_ray_d, ray_hit.normal), reflect_color);

    struct v3f color = new v3f {
        x: base_color.x * reflect_color.x,
        y: base_color.y * reflect_color.y,
        z: base_color.z * reflect_color.z
    };
    return color;
}

struct v3f get_color(f32 x, f32 y) {
    f32 range = ((f32) 15) / 10;
    f32 fx = fmap(x, 0, img_width, -range, range);
    f32 fy = fmap(y, 0, img_height, range, -range);

    struct v3f x0 = camera_pos;
    struct v3f d = new v3f { x: fx, y: fy, z: 1 }; // looking towards +z
    d = vnorm(d);

    d = vadd(
        vmul(d.x, camera_left),
        vadd(
            vmul(d.y, camera_up),
            vmul(d.z, camera_look)
        )
    );
    d = vnorm(d);

    struct ray ray = new ray { x0: x0, d: d };

    struct ray r = new ray { x0: x0, d: d };
    struct ray_hit h = cast_ray(r);
    struct v3f v = eval_ray_hit(h, img_depth);
    return v;
}
struct v3f get_aa_color(f32 x, f32 y) {
    struct v3f sum = vzero();
    f32 count = (f32) 0;
    f32 half = ((f32)1) / 2;
    for(i32 i = 0; i < sample_grid_size; i = i + 1;) {
        for(i32 j = 0; j < sample_grid_size; j = j + 1;) {
            f32 ox = fmap(i, 0, sample_grid_size, -half, half);
            f32 oy = fmap(j, 0, sample_grid_size, -half, half);
            sum = vadd(sum, get_color(x + ox, y + oy));
            count = count + 1;
        }
    }

    struct v3f v = vmul(((f32)1) / count, sum);

    if v.x > 1 || v.y > 1 || v.z > 1 {
        f32 largest = v.x;
        if v.y > largest { largest = v.y; }
        if v.z > largest { largest = v.z; }
        v = vmul(1f / largest, v);
    }
    return v;
}

i32 get_color_r(struct v3f a) { return (i32) (a.x * 256); }
i32 get_color_g(struct v3f a) { return (i32) (a.y * 256); }
i32 get_color_b(struct v3f a) { return (i32) (a.z * 256); }


struct fo_file { i8* ptr; }
struct fo_file fo_file_open(i8* filename) { return new fo_file { ptr: fopen(filename, "w") }; }
void fo_file_close(struct fo_file file) { fclose(file.ptr); }
void fo_file_append_str(struct fo_file file, i8* str) { c_fwrite_str(file.ptr, str); }
void fo_file_append_i32(struct fo_file file, i32 x) { c_fwrite_i32(file.ptr, x); }

extern void pp_v3f(f32 x, f32 y, f32 z);

i32 run(i32 argc, i8** argv) {
    i32* r_array = (i32*) malloc(sizeof(i32) * img_width * img_height);
    i32* g_array = (i32*) malloc(sizeof(i32) * img_width * img_height);
    i32* b_array = (i32*) malloc(sizeof(i32) * img_width * img_height);

    i32 i = 0;
    for(i32 y = 0; y < img_height; y = y + 1;) {
        for(i32 x = 0; x < img_width; x = x + 1;) {
            struct v3f col = get_aa_color(x, y);
//            i8 ix = (i8) (x / 2);
//            i8 iy = (i8) (y / 2);
//            make_i8(ix);
//            make_i8(iy);
//            i8 r = ix ^ iy;
//            i8 g = (~ix) & iy;
//            i8 b = ix | (~iy);
//            r_array[i] = r;
//            g_array[i] = g;
//            b_array[i] = b;
            r_array[i] = get_color_r(col);
            g_array[i] = get_color_g(col);
            b_array[i] = get_color_b(col);
            i = i + 1;
        }
        if y % 5 == 0 { printInt(y); }
    }


    struct fo_file file = fo_file_open("output.ppm");
    fo_file_append_str(file, "P3\n");
    fo_file_append_i32(file, img_width);
    fo_file_append_str(file, " ");
    fo_file_append_i32(file, img_height);
    fo_file_append_str(file, "\n");
    fo_file_append_str(file, "256\n");
    i = 0;
    puts("\nFile");
    for(i32 y = 0; y < img_height; y = y + 1;) {
        for(i32 x = 0; x < img_width; x = x + 1;) {
            fo_file_append_i32(file, r_array[i]);
            fo_file_append_str(file, " ");
            fo_file_append_i32(file, g_array[i]);
            fo_file_append_str(file, " ");
            fo_file_append_i32(file, b_array[i]);
            fo_file_append_str(file, "\n");
            i = i + 1;
        }
        if y % 200 == 0 { printInt(y); }
    }
    fo_file_close(file);

    free((i8*) r_array);
    free((i8*) g_array);
    free((i8*) b_array);
    return 0;
}

