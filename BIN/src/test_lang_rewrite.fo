extern fn printInt(x: i32)

include!("std/math")

extern fn print_f32(x: f32)

extern fn malloc(size: i32) -> i8*
extern fn free(ptr: i8*)

extern fn puts(str: i8*) -> i32

struct coords {
    x: f32,
    y: f32
}

mod coords {
    fn from_polar(theta: f32, r: f32) -> coords {
        return coords {
            x: math::cos(theta) * r,
            y: math::sin(theta) * r
        };
    }
    fn compute_mag(x: f32, y: f32) -> f32 {
        return math::sqrt(x * x + y * y);
    }
}

impl coords {
// test static methods (all of this is equivalent of mod coords)
// x.y(z...)
// <=>
// (typeof x)::y(x, z...)
// or
// So
// c.mag() <=> coords::mag(c)
// test static method resolution from inside class
// self arg is a coord or coord* and doesn't need type specifier
    fn mag(&self) -> f32 {
        return coords::compute_mag(self->x, self->y);
    }
    fn copy(self) -> coords {
        return self;
    }
    // doesn't compile :D
//    fn bad_copy(&self) -> coords {
//        return self; // shouldn't compile? idk, copy is sketch here
//    }
}

export("fo_run") fn run() -> i32 {
    let c: coords = coords::from_polar(5, 3);
    print_f32(c.x);
    print_f32(c.y);
    print_f32(c.mag());
    return 0;
}