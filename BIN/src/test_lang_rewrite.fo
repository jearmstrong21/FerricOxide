extern fn printInt(x: i32)

include!("std/math")

extern fn print_f32(x: f32)

extern fn malloc(size: i32) -> i8*
extern fn free(ptr: i8*)

extern fn puts(str: i8*) -> i32

trait T {
    fn foo() -> i32
}

struct A {}
struct B {}

impl T for A {
    fn foo() -> i32 {
        return 1;
    }
}

impl T for B {
    fn foo() -> i32 {
        return 5;
    }
}

fn consume_t(t: impl T) {
    puts("consume_t");
    printInt(t.foo());
}

fn consume_a(a: A) {
    puts("consume_a");
    printInt(a.foo());
}

fn consume_b(b: B) {
    puts("consume_b");
    printInt(b.foo());
}

export("fo_run") fn run() -> i32 {
    let a = A {};
    let b = B {};
    consume_t(a);
    consume_t(b);
    consume_a(a);
    consume_b(b);
    printInt(a.foo());
    printInt(b.foo());
    // expected:
    /*
    consume_t
    1
    consume_t
    5
    consume_a
    1
    consume_b
    5
    1
    5
    */
    return 0;
}