let x: i32 = 5;
let y: i32 = 10 * 5 + x;

extern("cosf") fn cosf(x: f32) -> f32;
extern("sin") fn sin(x: f32) -> f32;

extern("printInt") fn printInt(x: i32);
extern("print_f32") fn print_f32(x: f32);
extern("puts") fn puts(str: *u8);

struct S {
    x: f32
}

// TODO add Free trait that disables implicit copy and automatically calls free after dropping

impl S {
    static fn foo() -> S {
        return new S { x: 5.0 };
    }
    fn yeet() -> S {
        new S { x: self->x * self->x }
    }
    fn bro() -> *f32 {
        self->x
    }
    fn dbg() {
        puts("S"); // TODO why does this segfault
        print_f32(420.0);
        print_f32(self->x);
    }
}

impl f32 {
    fn cos() -> f32 {
        cosf(*self)
    }
    fn print_self() {
        print_f32(*self);
    }
}

export("fo_run") fn run() -> i32 {
    let s: S = new S { x: 5.0 };
    s.dbg();
    print_f32(s.bro());
    s.yeet().dbg();
    69.0.print_self();
    print_f32(4.0.cos());
    return 20;
}