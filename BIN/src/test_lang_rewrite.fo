extern fn printInt(x: i32);

extern fn cos(x: f32) -> f32;
extern fn sin(y: f32) -> f32;

extern fn print_f32(x: f32);

extern fn sqrtf(x: f32) -> f32;

extern fn malloc(size: i32) -> i8*;
extern fn free(ptr: i8*);

extern fn puts(str: i8*) -> i32;

struct coords {
    f32 x;
    f32 y;
}

fn polar_coords(theta: f32, r: f32) -> coords {
    return coords {
//        x: r * theta,
//        y: 4
        x: r * cos(theta),
        y: r * sin(theta)
    };
}

fn solve_quadratic(a: f32, b: f32, c: f32, t0: f32*, t1: f32*) -> bool {
    f32 discr = b * b - 4f * a * c;
    if (discr < 0) {
        return false;
    }
    f32 d = sqrtf(discr);
    t0 = (-b + d) / (2f * a);
    t1 = (-b - d) / (2f * a);
    return true;
}

fn test_arrays() {
    i32* arr = malloc(sizeof(i32) * 8) as i32*;
    for(i32 i = 0; i < 8; i = i + 1;) {
        arr[i] = i * i;
    }
    printInt(arr[5]);
    free(arr as i8*);
}

fn test_structs() {
    coords c = polar_coords(45.0, 10f);
    print_f32(c.x);
    print_f32(c.y);
    c.x = c.y * c.x;
    c.y = c.y / c.x;
    print_f32(c.y);
}

fn test_cast() {
    puts("test_cast");
    print_f32(5.5);
    printInt(5.5 as i32);
}

export("fo_run") fn run() -> i32 {
    f32 a = 1;
    f32 b = -5f;
    f32 c = 6;
    f32 t0 = 0;
    f32 t1 = 0;
    if (solve_quadratic(a, b, c, &t0, &t1)) {
        print_f32(t0);
        print_f32(t1);
    }
    if (t0 < t1) {
        f32 temp = t0;
        t0 = t1;
        t1 = temp;
    }
    test_arrays();
    test_structs();
    test_cast();
    return 5;
}